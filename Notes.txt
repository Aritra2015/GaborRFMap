% Changes made (April 1, 2013)      Supratim Ray - commit c4e44518e1c2

1. At present having different contrast values for mapping/task gabor is leadng to computer errors. It appears that the GRFContrastKey is not getting set properly: if the lablib.knot.plist is removed and this code is run, it does not register "GRF0/1/2GaborContrast" although the other variables are set. The number of computer errors decrease (but does not become zero) if the we stop storing and restoring Gabors in the presentStimSequence method of GRFStimuli.
2. In the instruction trials, mapping stimuli are now set to null.
3. shuffleStimList is now modified to shuffle the stimList.
4. Removed some unused keys.

% Changes made (April 2, 2013)      Supratim Ray - commit 9cd457375427

1. Include option to convert a gabor to a grating, hide task gabor (which then becomes a fixation task if percentage of catch trials is set to 100%) and either of the two mapping gabors, and an option to count stimuli in the done list for catch trial.
2. Put digital codes for each stimulus so that the entire mapping sequence (one side) can be reconstructed from the data stream directly. Digital codes can be presented for only one mapping stimulus.

% Changes made (April 3, 2013)      Supratim Ray - commit 3b0ee909a9e5

1. Bug: in GaborRFMap.nib, contrastPC0 was added to GRFStimTablesCounts (attributes inspector) instead of GRFStimTablesController. This has been changed. In addition, GRFStimTablesCount's attributes inspector showed GRFMappingBlocks and GRFTaskStatus. These have been removed. Making these changes still do not fix the issue of having computer errors when two gabors have different contrasts.

% Changes made (April 4, 2013)      Supratim Ray - commit a33f3a2f4e8c

1. Include option to change the temporal frequency of the mapping stimuli (7th parameter). kMaxMapValues reduced to 6 otherwise the program crashes. Temporal modulation parameter is also added for mapping stimuli.

% Changes made (May 22, 2013)       Supratim Ray - commit 37d183a5c6c5

1. Include option to send digital codes and control reward circuit using a single ITC18.


% Changes made (Oct 24, 2014)       Supratim Ray - commit dba3829d035f

1. Changed the main project file such that the plugin is saved in ~/Library/Application Support/Knot

2. Included the radiusDeg parameter in LLDataDef stimDescDef[] in GaborRFMap.m so that the Lablib file saves radius information also (useful for Gratings)

3. Temporal Frequency values are selected in the same way as contrast. 


% Changes made (Oct 29, 2014)       Supratim Ray - commit bf815d6f3d36

The digital codes change very fast (< 1 ms), due to which sampling rate needs ot be very high. While it is fine for Blackrock, we need to slow down the digital codes while using EEG recording system for which the sampling rate is unlikely to exceed 1 kHz. We extend two digital codes - TrialStart and TrialEnd by introducing a delay, so that they can be captured even at 1 kHz.

% Changes made (Jan 25, 2015)       Supratim Ray - commit 4bf900bc341d

Adding option to convert the stimuli into a plaid. Right now the plaid only works when set to counterphasing, but not drifting.

% Changes made (Mar 16, 2015)       Supratim Ray -

Added digital codes for plaids. Also, temporal frequency is set to a maximum of frameRateHz/2, and when it takes that value, the temporal phase is set to 90 degrees.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Desired changes (22/03/13) Supratim Ray

At present doneList in GRFMapStimTable is maintained as a 6-D array with kMaxMapValues = 8 entires per dimension, which needs 8^6 bytes. If fewer number of entries are used per parameter (say numAzi=1), we are unnecessarily dealing with a large and sparse matrix. Instead, this list should be constructed dynamically (7-D array of size numAzi*numEle*numSigma*numSF*numOri*numCon*numTF). This will allow us to increase the number of possible entries (kMaxMapValues) as long as all the parameters are not large simultaneously.

% Desired changes (17/10/14) Supratim Ray

When running in fixation mode, the task stimulus duration and inter-stimulus intervals should be automatically set to the mapping stimulus duration and ISI.

The protocol should generate auditory stimuli in addition to visual stimuli. The contrast and temporal frequency of the right visual stimulus should control the volume and type of auditory stimulus. Separate digital codes need to be sent for the auditory stimulus.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Changes made (21/08/15) Vinay Shirhatti

To draw the images the following sequence is followed:
1) Map the image numbers using spatial frequency value of Left Gabor and prepare the list of images in the trial in makeStimList
2) Store their bitmap representations in mapStimImage
3) Load the first Image bitmap in the textures and start the stimulus presentation sequence
4) Load every subsequent Image bitmap in that trial on the frame preceding its stimOnFrame. This way the fixation spot does not seem to be changing its colour between stimuli.
5) Clear mapStimImage after every trial ends

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Drawing color stimuli (circular patch of a certain color)
% 08/09/15 Vinay Shirhatti

Color stimuli are drawn as LLFixTarget
HSV color space is used.
Left Gabor parameters are used to set the color stimulus properties
The variables are mapped as follows:
orientation => hue
spatial frequency => saturation
contrast => value
radius => outer radius

I have included options to draw the stimuli using the RGB or the LAB color space as well, but these have to be explored and fine tuned.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Track the stimuli done in a block correctly
% 10/01/16 Vinay Shirhatti

All the stimuli in the set must be exhausted before moving to the next block. However this was not happening correctly in some cases. The count for some stimuli far exceeded the number of blocks done, whereas it was lesser for some others.
The problem was that doneList was being initialized only once in the beginning and therefore its size was fixed to the size decided by the initial stimulus-parameter counts.
When running the task the localList gets updated with the latest doneList in makeMapStimList

>>
localList = CFBitVectorCreateMutableCopy(NULL, stimInBlock, doneList);
CFBitVectorSetCount(localList, stimInBlock);
<<

When one runs a protocol with some number of stimuli 'n', finishes it and then resets the parameters for another protocol, the number of stimuli in the new protocol (say 'm') may not be equal to n. If it is m<n then doneList is larger than required and it still tracks the stimuli done correctly. However there is a problem when m>n. In this case, suppose a stimulus 'i' (m>i>n) is done. This is tracked in localList in that mapping loop.

>>
CFBitVectorSetBitAtIndex(localList, stimIndex, 1);
<<

However this is not tracked by doneList in tallyStimList, because the stimIndex is beyond the length of doneList
>>
CFBitVectorSetBitAtIndex(doneList, stimIndex, 1);
<<

As a result when localList gets updated with doneList the next time, it loses track of stimulus 'i' (it is automaticaly set as '0').
Therefore it might so happen that stimulus 'i' repeats in the same block.
On the other hand, stimRemainingInBlock decrements irrespective of all this. Eventually one might reach a stage where stimRemainingInBlock decrements to 0, with some stimuli (numbered >n) repeated multiple times and some others (numbered <=n) not done in that block.
Thus, this may lead to a discrepancy/dissimilarity in the number of repeats of stimuli across all blocks.


To address this problem, doneList must be updated/reinitialized every time there is any change made to the stimulus mapping fields. This is now done in 'reset' function in GRFMapStimTable.m


